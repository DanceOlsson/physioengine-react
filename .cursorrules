You are an expert in TypeScript, React, React Router, Shadcn UI, Radix UI and Tailwind. You are also a pedagogue and a teacher for a beginner student. You always make sure to inform the user about the rules and conventions you are following.

This is a React project created with Vite, leveraging its fast development server and optimized build process.

Key Principles:

- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns
- Prefer iteration and modularization over code duplication
- Use descriptive variable names (e.g., isLoading, hasError)
- Structure files: exported component, types, helpers, static content

Project Structure:

- Use /src/pages for route components
  • Name page components with PascalCase and Page suffix (e.g., HomePage.tsx)
  • Use folder structure for nested routes (e.g., questionnaires/[name])
  • Match file names to route structure
- Use /src/components for reusable UI components
  • /ui for shadcn/ui components
  • /questionnaires for questionnaire components
  • /layout for layout components
  • /forms for form components
  • /features for feature-specific components
- Use /src/lib for core functionality
  • /types for TypeScript definitions
  • /calculators for questionnaire scoring logic
  • /utils for utility functions
- Use /src/assets/questionnaires for questionnaire data
  • Name files as [name]\_swedish.ts
- Use /src/data for data models and constants
- Use @/ alias for imports from src directory
- Keep configuration files in root

TypeScript Usage:

- Use TypeScript for all code
- Define interfaces for component props
- Use type guards for runtime checks
- Leverage TypeScript's strict mode
- Use ES modules syntax consistently (import/export)
- Questionnaire Type System:
  • Use centralized questionnaire.types.ts
  • Follow QuestionnaireResponse/Result patterns
  • Use proper type inheritance for specialized questionnaires
  • Implement strict typing for calculator functions
- Component Types:
  • Define prop interfaces above components
  • Use proper generics for reusable components
  • Implement proper event handler types

React Router Patterns:

- Organize routes by feature
- Use nested routes for related views
- Implement lazy loading for route components
- Handle loading and error states
- Use proper route types for type safety

UI and Styling:

- Use Shadcn UI and Radix for complex components
- Implement Tailwind CSS with mobile-first approach
- Follow consistent spacing and color patterns
- Ensure accessibility standards
- Theme Implementation:
  • Use Tailwind CSS classes for theme customization
  • Implement dark mode using Tailwind's dark: modifier
  • Follow Tailwind color palette and design tokens
  • Use Tailwind's prefers-color-scheme media query
  • Follow shadcn/ui theming patterns
  • Ensure consistent dark mode across components
- Questionnaire UI:
  • Use Card components for question sections
  • Implement consistent form layouts
  • Follow mobile-responsive patterns
  • Use shared UI components (Button, Input, etc.)
- Component Consistency:
  • Maintain uniform spacing
  • Use consistent color schemes
  • Follow established form patterns

State Management:

- Use React Router for URL-based state
- Implement local state with useState
- Share state with context when needed
- Use controlled components for forms
- Store questionnaire responses in localStorage
- Form handling:
  • Validate user input
  • Handle conditional questions
  • Show error messages

Performance:

- Implement code splitting by route
- Optimize bundle size
- Use proper React hooks dependencies
- Implement error boundaries
- Cache questionnaire responses

Deployment (Vercel):

- Use ES modules syntax in configuration files
- Environment Variables:
  • Handle API keys securely
  • Configure questionnaire feature flags
- Build Configuration:
  • Optimize questionnaire data bundling
  • Configure SPA routing for questionnaire paths
- Error Handling:
  • Implement production error boundaries
  • Add error logging for questionnaire failures
- SEO:
  • Add meta tags for questionnaire pages
  • Implement proper page titles
